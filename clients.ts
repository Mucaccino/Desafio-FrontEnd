//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ClientBase {
    /**
     * authorization token value
     */
    public static authToken: string | null = null

    constructor() {

    }

    setAuthToken(token: string) {
        ClientBase.authToken = token;
    }

    protected transformOptions(options: RequestInit): Promise<RequestInit> {
        if (ClientBase.authToken && options.headers) {
            const headers = options.headers as Record<string, string>;
            headers["Authorization"] = "bearer " + ClientBase.authToken
            options.headers = headers
        } else {
            console.warn("Authorization token have not been set please authorize first.");
        }
        return Promise.resolve(options);
    }

    protected transformResult(url: string, response: Response, processor: (response: Response) => any) {
        // TODO: Return own result or throw exception to change default processing behavior, 
        // or call processor function to run the default processing logic
        console.log("Service call: " + url);
        return processor(response);
    }
}

export class AuthClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Authenticates a user with the provided login credentials.
     * @param loginRequest The login credentials of the user.
     * @return OK
     */
    authenticate(loginRequest: LoginRequest): Promise<AuthenticateUserResult> {
        let url_ = this.baseUrl + "/api/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginRequest);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processAuthenticate(_response);
        });
    }

    protected processAuthenticate(response: Response): Promise<AuthenticateUserResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticateUserResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = resultData404 !== undefined ? resultData404 : <any>null;
    
            return throwException("User not found", status, _responseText, _headers, result404);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = resultData401 !== undefined ? resultData401 : <any>null;
    
            return throwException("Invalid password", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal server error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthenticateUserResult>(null as any);
    }

    /**
     * Refreshes the access token using the provided refresh token.
     * @param refreshToken (optional) The refresh token.
     * @return OK
     */
    refreshToken(refreshToken: string | undefined): Promise<AuthenticateUserResult> {
        let url_ = this.baseUrl + "/api/auth/token?";
        if (refreshToken === null)
            throw new Error("The parameter 'refreshToken' cannot be null.");
        else if (refreshToken !== undefined)
            url_ += "refreshToken=" + encodeURIComponent("" + refreshToken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRefreshToken(_response);
        });
    }

    protected processRefreshToken(response: Response): Promise<AuthenticateUserResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticateUserResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = HttpValidationProblemDetails.fromJS(resultData400);
            return throwException("Bad request", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = resultData401 !== undefined ? resultData401 : <any>null;
    
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal server error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthenticateUserResult>(null as any);
    }
}

export class HealthClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Checks the health of the application.
     * @return An result with a 200 OK status code if the application is healthy.
     */
    checkHealth(): Promise<string> {
        let url_ = this.baseUrl + "/api/health";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCheckHealth(_response);
        });
    }

    protected processCheckHealth(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Internal server error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export class LicenseImageClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Uploads an image for a delivery driver.
     * @param id The ID of the delivery driver.
     * @param image (optional) The image file to upload.
     * @return A task that represents the asynchronous operation. Returns an IActionResult indicating the success or failure of the operation.
     */
    uploadImage(id: number, image: FileParameter | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/license-image/{id}/upload-image";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (image === null || image === undefined)
            throw new Error("The parameter 'image' cannot be null.");
        else
            content_.append("image", image.data, image.fileName ? image.fileName : "image");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUploadImage(_response);
        });
    }

    protected processUploadImage(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    /**
     * Retrieves the image of a delivery driver by their ID.
     * @param id The ID of the delivery driver.
     * @return An asynchronous task that returns an IActionResult. 
    If the delivery driver is found, returns the image file as a FileResult. 
    If the delivery driver is not found, returns a NotFoundResult. 
    If there is an error retrieving the image, returns a StatusCodeResult with a 500 status code and an error message.
     */
    getImage(id: number): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/license-image/{id}/image";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetImage(_response);
        });
    }

    protected processGetImage(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }
}

export class MotorcycleClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Creates a new motorcycle with the given request model and sends a motorcycle registered event.
     * @param requestModel The request model containing the motorcycle's information.
     * @return If the motorcycle is successfully created.
     */
    create(requestModel: MotorcycleCreateRequest): Promise<string> {
        let url_ = this.baseUrl + "/api/motorcycle/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(requestModel);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * Retrieves a motorcycle by its ID.
     * @param id The ID of the motorcycle.
     * @return An asynchronous task that returns an ActionResult containing the motorcycle if found, or a NotFound result if the motorcycle is not found.
     */
    getById(id: number): Promise<Motorcycle> {
        let url_ = this.baseUrl + "/api/motorcycle/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<Motorcycle> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Motorcycle.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Motorcycle>(null as any);
    }

    /**
     * Updates a motorcycle with the given ID using the provided request model.
     * @param id The ID of the motorcycle to update.
     * @param requestModel The request model containing the updated motorcycle information.
     * @return If the motorcycle is successfully updated.
     */
    update(id: number, requestModel: MotorcycleCreateRequest): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/motorcycle/{id}/update";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(requestModel);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }

    /**
     * Removes a motorcycle with the specified ID.
     * @param id The ID of the motorcycle to be removed.
     * @return An asynchronous task that returns an ActionResult containing a string message. If the removal is successful, the message is "Moto removida com sucesso." Otherwise, it returns a Conflict result with the error message.
     */
    removeMotorcycle(id: number): Promise<string> {
        let url_ = this.baseUrl + "/api/motorcycle/{id}/remove";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRemoveMotorcycle(_response);
        });
    }

    protected processRemoveMotorcycle(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * Retrieves a list of motorcycles filtered by plate.
     * @param plateFilter (optional) The plate filter to apply to the motorcycles. Optional.
     * @return An asynchronous task that returns an ActionResult containing an IEnumerable of Motorcycle objects.
     */
    getMotorcycles(plateFilter: string | null | undefined): Promise<Motorcycle[]> {
        let url_ = this.baseUrl + "/api/motorcycle/list?";
        if (plateFilter !== undefined && plateFilter !== null)
            url_ += "plateFilter=" + encodeURIComponent("" + plateFilter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetMotorcycles(_response);
        });
    }

    protected processGetMotorcycles(response: Response): Promise<Motorcycle[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Motorcycle.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Motorcycle[]>(null as any);
    }
}

export class RentalClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Registers a rental.
     * @param registerModel The rental registration model.
     * @return The created rental.
     */
    rentalRegister(registerModel: RentalCreateRequest): Promise<Rental> {
        let url_ = this.baseUrl + "/api/rental/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registerModel);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRentalRegister(_response);
        });
    }

    protected processRentalRegister(response: Response): Promise<Rental> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Rental.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Rental>(null as any);
    }

    /**
     * Retrieves a list of all rentals.
     * @return An asynchronous task that returns an ActionResult containing a list of Rental objects, or a BadRequest result if the rentals could not be retrieved.
     */
    getAll(): Promise<Rental[]> {
        let url_ = this.baseUrl + "/api/rental/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<Rental[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Rental.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Rental[]>(null as any);
    }

    /**
     * Retrieves a rental by its ID.
     * @param id The ID of the rental.
     * @return An asynchronous task that returns an ActionResult containing the rental if found, or a NotFound result if the rental is not found.
     */
    getById(id: number): Promise<Rental> {
        let url_ = this.baseUrl + "/api/rental/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<Rental> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Rental.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Rental>(null as any);
    }

    /**
     * Retrieves the total cost of a rental by its ID and end date.
     * @param id The ID of the rental.
     * @param endDate (optional) The end date of the rental.
     * @return An asynchronous task that returns an ActionResult containing the total cost as a string if successful, or a BadRequest result with an error message if the rental is not found or the end date is earlier than the start date.
     */
    getTotalCostById(id: number, endDate: Date | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/rental/{id}/totalCost?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetTotalCostById(_response);
        });
    }

    protected processGetTotalCostById(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * Delivers a motorcycle.
     * @param id The ID of the motorcycle to be delivered.
     * @param endDate (optional) The end date of the delivery.
     * @return An asynchronous task that returns an ActionResult containing the delivery cost and message, or a BadRequest result if the delivery was not successful.
     */
    deliverMotorcycle(id: number, endDate: Date | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/rental/{id}/deliver?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processDeliverMotorcycle(_response);
        });
    }

    protected processDeliverMotorcycle(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }
}

export class RentalPlanClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Gets all rental plans.
     * @return The list of rental plans.
     */
    getAll(): Promise<RentalPlan[]> {
        let url_ = this.baseUrl + "/api/rental-plan/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<RentalPlan[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RentalPlan.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RentalPlan[]>(null as any);
    }
}

export class UserClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Registers a new admin user.
     * @param registerModel The model containing the admin registration details.
     * @return The created admin user if successful, otherwise a bad request with the error message.
     */
    registerAdmin(registerModel: UserCreateRequest): Promise<User> {
        let url_ = this.baseUrl + "/api/user/register/admin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registerModel);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRegisterAdmin(_response);
        });
    }

    protected processRegisterAdmin(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }

    /**
     * Registers a new delivery driver user.
     * @param registerModel The model containing the delivery driver registration details.
     * @return The created delivery driver user if successful, otherwise a bad request with the error message or a 500 status code with the error message.
     */
    registerDeliveryDriver(registerModel: DeliveryDriverCreateRequest): Promise<User> {
        let url_ = this.baseUrl + "/api/user/register/delivery-driver";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(registerModel);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processRegisterDeliveryDriver(_response);
        });
    }

    protected processRegisterDeliveryDriver(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(null as any);
    }

    /**
     * Retrieves a list of users based on the specified criteria.
     * @param type (optional) The type of users to retrieve. Optional.
     * @param filter (optional) The filter to apply to the user list. Optional.
     * @return An asynchronous task that returns an ActionResult containing a list of UserDto objects.
     */
    getAllUsers(type: UserType | null | undefined, filter: string | null | undefined): Promise<UserDto[]> {
        let url_ = this.baseUrl + "/api/user/list/users?";
        if (type !== undefined && type !== null)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAllUsers(_response);
        });
    }

    protected processGetAllUsers(response: Response): Promise<UserDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto[]>(null as any);
    }

    /**
     * Get all delivery drivers.
     * @param filter (optional) The filter to apply to the name and username.
     * @return A list of delivery drivers.
     */
    getAllDeliveryDrivers(filter: string | null | undefined): Promise<DeliveryDriverUserDto[]> {
        let url_ = this.baseUrl + "/api/user/list/delivery-drivers?";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetAllDeliveryDrivers(_response);
        });
    }

    protected processGetAllDeliveryDrivers(response: Response): Promise<DeliveryDriverUserDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DeliveryDriverUserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DeliveryDriverUserDto[]>(null as any);
    }
}

export class AuthenticateUserResult implements IAuthenticateUserResult {
    id!: number;
    username!: string;
    name!: string;
    isAdmin!: boolean;
    accessToken!: string;
    refreshToken!: string;

    constructor(data?: IAuthenticateUserResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.name = _data["name"];
            this.isAdmin = _data["isAdmin"];
            this.accessToken = _data["accessToken"];
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): AuthenticateUserResult {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateUserResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["name"] = this.name;
        data["isAdmin"] = this.isAdmin;
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken;
        return data;
    }
}

export interface IAuthenticateUserResult {
    id: number;
    username: string;
    name: string;
    isAdmin: boolean;
    accessToken: string;
    refreshToken: string;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class HttpValidationProblemDetails extends ProblemDetails implements IHttpValidationProblemDetails {
    errors!: { [key: string]: string[]; };

    [key: string]: any;

    constructor(data?: IHttpValidationProblemDetails) {
        super(data);
        if (!data) {
            this.errors = {};
        }
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        (<any>this.errors)![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): HttpValidationProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new HttpValidationProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    (<any>data["errors"])[key] = (<any>this.errors)[key];
            }
        }
        super.toJSON(data);
        return data;
    }
}

export interface IHttpValidationProblemDetails extends IProblemDetails {
    errors: { [key: string]: string[]; };

    [key: string]: any;
}

/** Login request */
export class LoginRequest implements ILoginRequest {
    /** User name */
    username!: string;
    /** User password */
    password!: string;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

/** Login request */
export interface ILoginRequest {
    /** User name */
    username: string;
    /** User password */
    password: string;
}

/** Represents a request to create a motorcycle. */
export class MotorcycleCreateRequest implements IMotorcycleCreateRequest {
    /** Gets or sets the year of the motorcycle. */
    year!: number;
    /** Gets or sets the model of the motorcycle. */
    model!: string;
    /** Gets or sets the plate of the motorcycle. */
    plate!: string;

    constructor(data?: IMotorcycleCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.model = _data["model"];
            this.plate = _data["plate"];
        }
    }

    static fromJS(data: any): MotorcycleCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new MotorcycleCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["model"] = this.model;
        data["plate"] = this.plate;
        return data;
    }
}

/** Represents a request to create a motorcycle. */
export interface IMotorcycleCreateRequest {
    /** Gets or sets the year of the motorcycle. */
    year: number;
    /** Gets or sets the model of the motorcycle. */
    model: string;
    /** Gets or sets the plate of the motorcycle. */
    plate: string;
}

export class Motorcycle implements IMotorcycle {
    id!: number;
    year!: number;
    model!: string;
    plate!: string;

    constructor(data?: IMotorcycle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.year = _data["year"];
            this.model = _data["model"];
            this.plate = _data["plate"];
        }
    }

    static fromJS(data: any): Motorcycle {
        data = typeof data === 'object' ? data : {};
        let result = new Motorcycle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["year"] = this.year;
        data["model"] = this.model;
        data["plate"] = this.plate;
        return data;
    }
}

export interface IMotorcycle {
    id: number;
    year: number;
    model: string;
    plate: string;
}

export class Rental implements IRental {
    id!: number;
    motorcycleId!: number;
    deliveryDriverId!: number;
    rentalPlanId!: number;
    motorcycle?: Motorcycle | undefined;
    deliveryDriver?: DeliveryDriverUser | undefined;
    rentalPlan?: RentalPlan | undefined;
    startDate!: Date;
    endDate!: Date;
    expectedEndDate!: Date;
    totalCost!: number;
    penaltyCost!: number;

    constructor(data?: IRental) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.motorcycleId = _data["motorcycleId"];
            this.deliveryDriverId = _data["deliveryDriverId"];
            this.rentalPlanId = _data["rentalPlanId"];
            this.motorcycle = _data["motorcycle"] ? Motorcycle.fromJS(_data["motorcycle"]) : <any>undefined;
            this.deliveryDriver = _data["deliveryDriver"] ? DeliveryDriverUser.fromJS(_data["deliveryDriver"]) : <any>undefined;
            this.rentalPlan = _data["rentalPlan"] ? RentalPlan.fromJS(_data["rentalPlan"]) : <any>undefined;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.expectedEndDate = _data["expectedEndDate"] ? new Date(_data["expectedEndDate"].toString()) : <any>undefined;
            this.totalCost = _data["totalCost"];
            this.penaltyCost = _data["penaltyCost"];
        }
    }

    static fromJS(data: any): Rental {
        data = typeof data === 'object' ? data : {};
        let result = new Rental();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["motorcycleId"] = this.motorcycleId;
        data["deliveryDriverId"] = this.deliveryDriverId;
        data["rentalPlanId"] = this.rentalPlanId;
        data["motorcycle"] = this.motorcycle ? this.motorcycle.toJSON() : <any>undefined;
        data["deliveryDriver"] = this.deliveryDriver ? this.deliveryDriver.toJSON() : <any>undefined;
        data["rentalPlan"] = this.rentalPlan ? this.rentalPlan.toJSON() : <any>undefined;
        data["startDate"] = this.startDate ? formatDate(this.startDate) : <any>undefined;
        data["endDate"] = this.endDate ? formatDate(this.endDate) : <any>undefined;
        data["expectedEndDate"] = this.expectedEndDate ? formatDate(this.expectedEndDate) : <any>undefined;
        data["totalCost"] = this.totalCost;
        data["penaltyCost"] = this.penaltyCost;
        return data;
    }
}

export interface IRental {
    id: number;
    motorcycleId: number;
    deliveryDriverId: number;
    rentalPlanId: number;
    motorcycle?: Motorcycle | undefined;
    deliveryDriver?: DeliveryDriverUser | undefined;
    rentalPlan?: RentalPlan | undefined;
    startDate: Date;
    endDate: Date;
    expectedEndDate: Date;
    totalCost: number;
    penaltyCost: number;
}

export class User implements IUser {
    id!: number;
    username!: string;
    name!: string;
    passwordHash!: string;
    salt!: string;
    password!: string;
    type!: UserType;
    refreshToken?: string | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.name = _data["name"];
            this.passwordHash = _data["passwordHash"];
            this.salt = _data["salt"];
            this.password = _data["password"];
            this.type = _data["type"];
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["name"] = this.name;
        data["passwordHash"] = this.passwordHash;
        data["salt"] = this.salt;
        data["password"] = this.password;
        data["type"] = this.type;
        data["refreshToken"] = this.refreshToken;
        return data;
    }
}

export interface IUser {
    id: number;
    username: string;
    name: string;
    passwordHash: string;
    salt: string;
    password: string;
    type: UserType;
    refreshToken?: string | undefined;
}

export class DeliveryDriverUser extends User implements IDeliveryDriverUser {
    cnpj!: string;
    dateOfBirth!: Date;
    driverLicenseNumber!: string;
    driverLicenseType!: string;
    driverLicenseImage?: string | undefined;

    constructor(data?: IDeliveryDriverUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cnpj = _data["cnpj"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.driverLicenseNumber = _data["driverLicenseNumber"];
            this.driverLicenseType = _data["driverLicenseType"];
            this.driverLicenseImage = _data["driverLicenseImage"];
        }
    }

    static fromJS(data: any): DeliveryDriverUser {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryDriverUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cnpj"] = this.cnpj;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["driverLicenseNumber"] = this.driverLicenseNumber;
        data["driverLicenseType"] = this.driverLicenseType;
        data["driverLicenseImage"] = this.driverLicenseImage;
        super.toJSON(data);
        return data;
    }
}

export interface IDeliveryDriverUser extends IUser {
    cnpj: string;
    dateOfBirth: Date;
    driverLicenseNumber: string;
    driverLicenseType: string;
    driverLicenseImage?: string | undefined;
}

export enum UserType {
    Admin = "Admin",
    DeliveryDriver = "DeliveryDriver",
}

export class RentalPlan implements IRentalPlan {
    id!: number;
    days!: number;
    dailyCost!: number;

    constructor(data?: IRentalPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.days = _data["days"];
            this.dailyCost = _data["dailyCost"];
        }
    }

    static fromJS(data: any): RentalPlan {
        data = typeof data === 'object' ? data : {};
        let result = new RentalPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["days"] = this.days;
        data["dailyCost"] = this.dailyCost;
        return data;
    }
}

export interface IRentalPlan {
    id: number;
    days: number;
    dailyCost: number;
}

/** Represents a request to create a rental. */
export class RentalCreateRequest implements IRentalCreateRequest {
    /** Gets or sets the ID of the motorcycle to be rented. */
    motorcycleId!: number;
    /** Gets or sets the ID of the rental plan. */
    rentalPlanId!: number;

    constructor(data?: IRentalCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.motorcycleId = _data["motorcycleId"];
            this.rentalPlanId = _data["rentalPlanId"];
        }
    }

    static fromJS(data: any): RentalCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RentalCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["motorcycleId"] = this.motorcycleId;
        data["rentalPlanId"] = this.rentalPlanId;
        return data;
    }
}

/** Represents a request to create a rental. */
export interface IRentalCreateRequest {
    /** Gets or sets the ID of the motorcycle to be rented. */
    motorcycleId: number;
    /** Gets or sets the ID of the rental plan. */
    rentalPlanId: number;
}

/** Represents a request to create an user. */
export class UserCreateRequest implements IUserCreateRequest {
    /** Gets or sets the name of the user. */
    name!: string;
    /** Gets or sets the username of the user. */
    username!: string;
    /** Gets or sets the password of the user. */
    password!: string;

    constructor(data?: IUserCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

/** Represents a request to create an user. */
export interface IUserCreateRequest {
    /** Gets or sets the name of the user. */
    name: string;
    /** Gets or sets the username of the user. */
    username: string;
    /** Gets or sets the password of the user. */
    password: string;
}

/** Represents a request to create a delivery driver. */
export class DeliveryDriverCreateRequest extends UserCreateRequest implements IDeliveryDriverCreateRequest {
    /** Gets or sets the CNPJ of the delivery driver. */
    cnpj!: string;
    /** Gets or sets the date of birth of the delivery driver. */
    dateOfBirth!: Date;
    /** Gets or sets the driver license number of the delivery driver. */
    driverLicenseNumber!: string;
    /** Gets or sets the driver license type of the delivery driver. */
    driverLicenseType!: string;
    /** Gets or sets the driver license image of the delivery driver. */
    driverLicenseImage?: string | undefined;

    constructor(data?: IDeliveryDriverCreateRequest) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cnpj = _data["cnpj"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.driverLicenseNumber = _data["driverLicenseNumber"];
            this.driverLicenseType = _data["driverLicenseType"];
            this.driverLicenseImage = _data["driverLicenseImage"];
        }
    }

    static fromJS(data: any): DeliveryDriverCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryDriverCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cnpj"] = this.cnpj;
        data["dateOfBirth"] = this.dateOfBirth ? formatDate(this.dateOfBirth) : <any>undefined;
        data["driverLicenseNumber"] = this.driverLicenseNumber;
        data["driverLicenseType"] = this.driverLicenseType;
        data["driverLicenseImage"] = this.driverLicenseImage;
        super.toJSON(data);
        return data;
    }
}

/** Represents a request to create a delivery driver. */
export interface IDeliveryDriverCreateRequest extends IUserCreateRequest {
    /** Gets or sets the CNPJ of the delivery driver. */
    cnpj: string;
    /** Gets or sets the date of birth of the delivery driver. */
    dateOfBirth: Date;
    /** Gets or sets the driver license number of the delivery driver. */
    driverLicenseNumber: string;
    /** Gets or sets the driver license type of the delivery driver. */
    driverLicenseType: string;
    /** Gets or sets the driver license image of the delivery driver. */
    driverLicenseImage?: string | undefined;
}

export class UserDto implements IUserDto {
    id!: number;
    username!: string;
    name!: string;
    type!: UserType;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    }
}

export interface IUserDto {
    id: number;
    username: string;
    name: string;
    type: UserType;
}

export class DeliveryDriverUserDto implements IDeliveryDriverUserDto {
    id!: number;
    username!: string;
    name!: string;
    cnpj!: string;
    dateOfBirth!: Date;
    driverLicenseNumber!: string;
    driverLicenseType!: string;
    driverLicenseImage?: string | undefined;

    constructor(data?: IDeliveryDriverUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.name = _data["name"];
            this.cnpj = _data["cnpj"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.driverLicenseNumber = _data["driverLicenseNumber"];
            this.driverLicenseType = _data["driverLicenseType"];
            this.driverLicenseImage = _data["driverLicenseImage"];
        }
    }

    static fromJS(data: any): DeliveryDriverUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryDriverUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["name"] = this.name;
        data["cnpj"] = this.cnpj;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["driverLicenseNumber"] = this.driverLicenseNumber;
        data["driverLicenseType"] = this.driverLicenseType;
        data["driverLicenseImage"] = this.driverLicenseImage;
        return data;
    }
}

export interface IDeliveryDriverUserDto {
    id: number;
    username: string;
    name: string;
    cnpj: string;
    dateOfBirth: Date;
    driverLicenseNumber: string;
    driverLicenseType: string;
    driverLicenseImage?: string | undefined;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}